# Standards: 1.2
---
# @var haproxy_version:description: Version of the PPA repo to use
haproxy_version: 2.0

# @var haproxy_skip_configuration:description: Skip the configuration and don't touch it
haproxy_skip_configuration: False

# @var haproxy_enable_maintenance:description: Enable or disable the maintenance backend
haproxy_enable_maintenance: False

# @var haproxy_enable_security_headers:description: Enable general security headers
haproxy_enable_security_headers: True

# @var haproxy_content_type_options:description: X-Content-Type-Options header if security headers are enabled
haproxy_content_type_options: nosniff

# @var haproxy_frame_options:description: X-Frame-Options header if security headers are enabled
haproxy_frame_options: SAMEORIGIN

# @var haproxy_xss_protection:description: X-XSS-Protection header if security headers are enabled
haproxy_xss_protection: 1; mode=block

# @var haproxy_referer_policy:description: Referrer-Policy header if security headers are enabled
haproxy_referer_policy: no-referrer-when-downgrade

# @var haproxy_expect_ct:description: Expect-CT header if security headers are enabled
haproxy_expect_ct: max-age=0

# @var haproxy_sslredirect_filter:description: Filter to apply an redirect to HTTPS
haproxy_sslredirect_filter: http !letsencrypt

# @var haproxy_maintenance_filter:description: Filter to apply skip maintenance mode
haproxy_maintenance_filter: "!private-network"

# @var haproxy_maintenance_backend:description: Backend used for maintenance mode
haproxy_maintenance_backend: maintenance

# @var haproxy_default_backend:description: Default fallback backend
haproxy_default_backend: fallback

# @var haproxy_letsencrypt_backend:description: Default letsencrypt backend
haproxy_letsencrypt_backend: "{{ haproxy_default_backend }}"

# @var haproxy_exporter_binding:description: Address to bind the Prometheus exporter
haproxy_exporter_binding: 0.0.0.0

# @var haproxy_incoming_binding:description: Address to bind the incoming frontend
haproxy_incoming_binding: 0.0.0.0

# @var haproxy_tcp_logging:description: Logging format for TCP frontends
haproxy_tcp_logging: '{"host":"%H","ident":"haproxy","pid":%pid,"timestamp":"%Tl","haproxy":{"conn":{"act":%ac,"fe":%fc,"be":%bc,"srv":%sc},"queue":{"backend":%bq,"srv":%sq},"time":{"tw":%Tw,"tc":%Tc,"tt":%Tt},"termination_state":"%tsc","retries":%rc,"network":{"client_ip":"%ci","client_port":%cp,"frontend_ip":"%fi","frontend_port":%fp},"name":{"backend":"%b","frontend":"%ft","server":"%s"},"bytes":{"uploaded":%U,"read":%B}}}'

# @var haproxy_http_logging:description: Logging format for HTTP frontends
haproxy_http_logging: '{"host":"%H","ident":"haproxy","pid":%pid,"timestamp":"%Tl","haproxy":{"conn":{"act":%ac,"fe":%fc,"be":%bc,"srv":%sc},"queue":{"backend":%bq,"srv":%sq},"time":{"tq":%Tq,"tw":%Tw,"tc":%Tc,"tr":%Tr,"tt":%Tt},"termination_state":"%tsc","retries":%rc,"network":{"client_ip":"%ci","client_port":%cp,"frontend_ip":"%fi","frontend_port":%fp},"ssl":{"version":"%sslv","ciphers":"%sslc"},"request":{"method":"%HM","uri":"%HP","protocol":"%HV","header":{"host":"%[capture.req.hdr(0),json(utf8s)]","referer":"%[capture.req.hdr(1),json(utf8s)]"}},"name":{"backend":"%b","frontend":"%ft","server":"%s"},"response":{"status_code":%ST,"location":"%[capture.res.hdr(0),json(utf8s)]"},"bytes":{"uploaded":%U,"read":%B}}}'

# @var haproxy_ssl_ciphers:description: List of ciphers used for SSL connections
haproxy_ssl_ciphers:
  - ECDHE-ECDSA-AES128-GCM-SHA256
  - ECDHE-RSA-AES128-GCM-SHA256
  - ECDHE-ECDSA-AES256-GCM-SHA384
  - ECDHE-RSA-AES256-GCM-SHA384
  - ECDHE-ECDSA-CHACHA20-POLY1305
  - ECDHE-RSA-CHACHA20-POLY1305
  - DHE-RSA-AES128-GCM-SHA256
  - DHE-RSA-AES256-GCM-SHA384

# @var haproxy_ssl_ciphersuites:description: List of ciphersuites used for SSL connections
haproxy_ssl_ciphersuites:
  - TLS_AES_128_GCM_SHA256
  - TLS_AES_256_GCM_SHA384
  - TLS_CHACHA20_POLY1305_SHA256

# @var haproxy_ssl_options:description: List of options used for SSL connections
haproxy_ssl_options:
  - no-sslv3
  - no-tlsv10
  - no-tlsv11
  - no-tls-tickets

# @var haproxy_acls:description: List of acl file definitions
# @var haproxy_acls:example: >
# haproxy_acls:
#   - name: office
#     whitelist:
#       - 192.168.1.1/24
#       - 10.0.0.0/20
#   - name: remote
#     whitelist:
#        - 10.1.0.0/24
#   - name: ancient
#     state: absent
# @end
haproxy_acls:
  - name: private
    whitelist:
      - 10.10.0.0/20

# @var haproxy_userlists:description: List of userlist definitions
# @var haproxy_userlists:example: >
# haproxy_userlists:
#   - name: example
#     users:
#       - username: username1
#         password: $6$To5YrYYRjY/.utPQ$hPTAoVJrf5heTtFBFDJIJz58X15fNQ5MD0qqkt4.MSHjyqyyE8cNoZRqr7qBLh/h/VgdcNQiHCd6VvB8av70t0
#       - username: username2
#         password: $6$kZ/4XMtsx$2v4XFur04PG3iWnBKSJMm03.TqYachWUrfsMTayVFhtOZ7y8LO7GubBZK4P7.TQhwUjYeZ3UpmC0VO5V8JLfi/
#       - username: username3
#         password: $6$.1t20Tfh8pocL2$0YX7s.Yrze6Vge1XI.Fs.FvegmqZSkg2sdFXjFi271LNwOC1lRtf.F46PIOIYmsVfjpEu86scRNpY/MqA/tE0/
# @end
haproxy_userlists: []

# @var haproxy_peers:description: List of clustering peers
# @var haproxy_peers:example: >
# haproxy_peers:
#   - name: haproxy-01
#     address: 192.168.1.2
#   - name: haproxy-02
#     address: 192.168.1.3
# @end
haproxy_peers: []

# @var haproxy_frontends:description: List of frontends
# @var haproxy_frontends:example: >
# haproxy_frontends:
#   - name: frontend1
#     content: |
#       bind 0.0.0.0:1337
#       mode tcp
#       use_backend backend1
#   - name: frontend2
#     content: |
#       bind 0.0.0.0:1338
#       mode tcp
#       use_backend backend2
# @end
haproxy_frontends: []

# @var haproxy_backends:description: List of backends
# @var haproxy_backends:example: >
# haproxy_backends:
#   - name: backend1
#     content: |
#       mode tcp
#       server backend1 localhost:1337
#   - name: backend2
#     settings:
#       - mode http
#     options:
#       - tcp-smart-connect
#     defaults:
#       - tfo
#       - check
#     smart_connect: True
#     retryable_errors: True
#     csp: True
#     servers:
#       - server1:8080
#       - server2:8080
#       - server3:8080
# @end
haproxy_backends: []

# @var haproxy_blocks:description: List of combined frontend and backends
# @var haproxy_blocks:example: >
# haproxy_blocks:
#   - name: foobar
#     frontends: |
#       bind 0.0.0.0:8080
#       log global
#       mode tcp
#       use_backend foobar
#     backends: |
#       log global
#       mode tcp
#       server foobar-01 foobar.example.com:8080 check
#   - name: barfoo
#     frontends:
#       - name: barfoo1
#         content: |
#           ...
#       - name: barfoo2
#         content: |
#           ...
#       - name: barfoo3
#         content: |
#           ...
#     backends:
#       - name: backend1
#         content: |
#           ...
#       - name: backend2
#         content: |
#           ...
#       - name: backend3
#         content: |
#           ...
# @end
haproxy_blocks: []

# @var haproxy_config:description: Raw configuration for the HAProxy
# @var haproxy_config:example: >
# haproxy_config: |
#   global
#     log /dev/log local0
#     chroot /var/lib/haproxy
#     ...
#
#   defaults
#     log global
#     mode http
#     ...
#
#   frontend incoming
#     bind 0.0.0.0:80
#     bind 0.0.0.0:443 alpn h2,http/1.1,http/1.0 ssl crt /etc/haproxy/ssl/
#     ...
# @end
haproxy_config:

# @var haproxy_incoming:description: Configuration for the incoming frontend
# @var haproxy_incoming:example: >
# haproxy_incoming: |
#   acl domain1-host req.hdr(host) -m dom -i example.com
#   use_backend domain1 if domain1-host

#   acl domain2-host req.hdr(host) -m dom -i example.de
#   use_backend domain2 if domain2-host

#   acl domain3-host req.hdr(host) -m dom -i example.org
#   use_backend domain3 if domain3-host
# @end
haproxy_incoming:

# @var haproxy_log_address:description: Address to log into
haproxy_log_address: /dev/log

# @var haproxy_log_facility:description: Facility to log
haproxy_log_facility: local0

# @var haproxy_log_extra:description: Extra options for global log definiton
haproxy_log_extra:

# @var haproxy_global_maxconn:description: Globally defined max connections
haproxy_global_maxconn: 32000

# @var haprxy_http_reuse:description: Declare how idle HTTP connections may be shared between requests
haprxy_http_reuse: always

# @var haproxy_error_list:description: List of supported error pages
haproxy_error_list:
  - 400
  - 403
  - 405
  - 408
  - 429
  - 500
  - 502
  - 503
  - 504

# @var haproxy_error_pages:description: Path to error page files
haproxy_error_pages: errors

...
